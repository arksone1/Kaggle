import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

all_data = pd.concat((train, test), axis=0).reset_index(drop=True)
all_data.columns = (all_data.columns).map(lambda x: '{:03d}'.format(int(x.split('pixel')[1])) if x !='label' else x)
all_data = all_data[sorted(all_data.columns)]
X = all_data.loc[:, all_data.columns != 'label']/255

fig, ax = plt.subplots()
ax = plt.imshow(X.loc[1, :].values.reshape(28, 28))

y = all_data['label']
X = X.values.reshape(X.shape[0], 28, 28, 1)
Xtrain, ytrain = X[y.notna()], y[y.notna()]
Xtest, ytest = X[y.isna()], y[y.isna()]



from keras.utils.np_utils import to_categorical
ytrain = to_categorical(ytrain, num_classes=10)
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
model = Sequential()
model.add(Conv2D(32, kernel_size=(6,6), strides=(2,2), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Conv2D(64, kernel_size=(5,5), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(1000, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(
    featurewise_center=False,
    samplewise_center=False,
    featurewise_std_normalization=False,
    samplewise_std_normalization=False,
    zca_whitening=False,
    zca_epsilon=1e-06,
    rotation_range=0.2,
    width_shift_range=0.2,
    height_shift_range=0.2,
    brightness_range=None,
    shear_range=0.1,
    zoom_range=0.1,
    channel_shift_range=0.0,
    fill_mode='nearest',
    cval=0.0,
    horizontal_flip=False,
    vertical_flip=False,
    rescale=None,
    preprocessing_function=None,
    data_format=None,
    validation_split=0.2
)
datagen.fit(Xtrain)
model.fit_generator(datagen.flow(Xtrain, ytrain, batch_size=32), steps_per_epoch=42000, epochs=5)
ytest = model.predict(Xtest)
result = np.argmax(ytest,axis = 1)
submit = pd.read_csv('sample_submission.csv')
submit['Label'] = result
submit['Label'] = submit['Label'].astype(int)
submit.to_csv('submit.csv', index= False)







training_data_4D = all_data[:ntrain].drop(['label'], axis=1).values.reshape(-1, 28, 28, 1)
testing_data_4D = all_data[ntrain:].drop(['label'], axis=1).values.reshape(-1, 28, 28, 1)
Y = all_data[:ntrain]['label']
from keras.utils.np_utils import to_categorical
Y = to_categorical(Y, num_classes=10)
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(5,5), padding='same', input_shape=(28, 28, 1), activation='relu'))
model.add(Conv2D(filters=32, kernel_size=(5,5), padding='same', activation='relu'))
model.add(Dropout(0.25))
model.add(Conv2D(filters=64, kernel_size=(5,5), padding='same', input_shape=(28, 28, 1), activation='relu'))
model.add(Conv2D(filters=64, kernel_size=(5,5), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()
